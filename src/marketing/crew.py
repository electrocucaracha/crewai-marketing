# Copyright (c) 2025
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Module providing a Marketing crew that generates LinkedIn Posts."""

import streamlit as st
from crewai import Agent, Crew, Process, Task
from crewai.knowledge.source.text_file_knowledge_source import TextFileKnowledgeSource
from crewai.project import CrewBase, agent, crew, task
from crewai.tasks.task_output import TaskOutput

text_source = TextFileKnowledgeSource(file_paths=["background.txt"])


@CrewBase
class Marketing:
    """Marketing crew"""

    agents_config = "config/agents.yaml"
    tasks_config = "config/create_post.yaml"

    def callback_function(self, output: TaskOutput):
        """
        This is a callback function that will be executed after the completion of each task.

        It takes in a TaskOutput object, which contains information about the completed task,
        including its name and any other relevant details. The function uses this information
        to display an info message to the user via Streamlit.

        Parameters:
            output (TaskOutput): The output from the completed task

        Returns:
            None
        """
        st.info(f"{output.name.title().replace('_', ' ')} task completed")

    @agent
    def explainer(self) -> Agent:
        """
        Creates an instance of the Explainer agent.

        Parameters:
            None

        Returns:
            Agent: A newly created instance of the Explainer agent
        """
        # pylint: disable=invalid-sequence-index
        return Agent(config=self.agents_config["explainer"])  # type: ignore[index]

    @agent
    def copywriter(self) -> Agent:
        """
        Creates an instance of the Copywriter agent.

        This agent is responsible for generating content for marketing campaigns.

        Parameters:
            None

        Returns:
            Agent: A newly created instance of the Copywriter agent
        """
        # pylint: disable=invalid-sequence-index
        return Agent(config=self.agents_config["copywriter"])  # type: ignore[index]

    @agent
    def social_media(self) -> Agent:
        """
        Creates an instance of the Social Media agent.

        This agent is responsible for managing and scheduling posts on various social
        media platforms.

        Parameters:
            None

        Returns:
            Agent: A newly created instance of the Social Media agent
        """
        # pylint: disable=invalid-sequence-index
        return Agent(config=self.agents_config["social_media"])  # type: ignore[index]

    @agent
    def editor(self) -> Agent:
        """
        Creates an instance of the Editor agent, responsible for reviewing and
        refining content.

        This agent is used to review and refine content generated by other agents,
        ensuring it meets marketing standards.

        Parameters:
            None

        Returns:
            Agent: A newly created instance of the Editor agent
        """
        # pylint: disable=invalid-sequence-index
        return Agent(config=self.agents_config["editor"])  # type: ignore[index]

    @agent
    def publisher(self) -> Agent:
        """
        Creates an instance of the Publisher agent, responsible for publishing and
        disseminating marketing content.

        This agent is used to distribute marketing materials to various channels,
        including social media, email, and websites.

        Parameters:
            None

        Returns:
            Agent: A newly created instance of the Publisher agent
        """
        # pylint: disable=invalid-sequence-index
        return Agent(config=self.agents_config["publisher"])  # type: ignore[index]

    @task
    def explanation(self) -> Task:
        """
        Creates a task to generate an explanation for idea.

        This task uses the Explainer agent to generate an explanation based on
        the provided input.

        Parameters:
            None

        Returns:
            Task: A newly created instance of the Explanation task
        """
        return Task(
            # pylint: disable=invalid-sequence-index
            config=self.tasks_config["explanation"],  # type: ignore[index]
            callback=self.callback_function,
        )

    @task
    def content_creation(self) -> Task:
        """
        Creates a task to generate marketing content.

        The Copywriter agent generates the initial draft of marketing
        content, which is then reviewed and refined by the Editor agent.
        Finally, the Publisher agent disseminates the finalized content
        across various channels.

        Parameters:
            None

        Returns:
            Task: A newly created instance of the Content Creation task
        """
        return Task(
            # pylint: disable=invalid-sequence-index
            config=self.tasks_config["content_creation"],  # type: ignore[index]
            callback=self.callback_function,
        )

    @task
    def review(self) -> Task:
        """
        Creates a task to review marketing content.

        This task uses the Editor agent to review and refine the provided
        content, ensuring it meets marketing standards.

        Parameters:
            None

        Returns:
            Task: A newly created instance of the Review task
        """
        return Task(
            # pylint: disable=invalid-sequence-index
            config=self.tasks_config["review"],  # type: ignore[index]
            callback=self.callback_function,
        )

    @task
    def generate_post(self) -> Task:
        """
        Creates a task to generate a marketing post.

        The Publisher agent disseminates the finalized content
        across various channels.

        Parameters:
            None

        Returns:
            Task: A newly created instance of the Post Generation task
        """
        return Task(
            # pylint: disable=invalid-sequence-index
            config=self.tasks_config["generate_post"],  # type: ignore[index]
            callback=self.callback_function,
        )

    @crew
    def crew(self) -> Crew:
        """Creates the Marketing crew"""

        return Crew(
            agents=self.agents,  # type: ignore[attr-defined] # pylint: disable=no-member
            tasks=self.tasks,  # type: ignore[attr-defined] # pylint: disable=no-member
            process=Process.sequential,
            verbose=True,
            knowledge_sources=[text_source],
            embedder={
                "provider": "ollama",
                "config": {
                    "model": "mxbai-embed-large",
                },
            },
        )
